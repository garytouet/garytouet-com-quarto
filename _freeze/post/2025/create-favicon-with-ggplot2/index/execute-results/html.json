{
  "hash": "560a98e172ca740679cd3feac708d3da",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating the favicon for this website with `ggplot2`\"\nsubtitle: \"We will use the package to create an image and export it in several sizes. It is not as straightforward as I thought.\" \ndate: 2025.09.25\ncategories: ['R', 'website']\n---\n\n\n::: {.cell}\n\n:::\n\n\n## Favicon – what is it? \n\nQuoting from [Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Glossary/Favicon):\n\n> A favicon (favorite icon) is a tiny icon included along with a website, which is displayed in places like the browser's address bar, page tabs and bookmarks menu.\n>\n> […]\n>\n> They are used to improve user experience and enforce brand consistency. When a familiar icon is seen in the browser's address bar, for example, it helps users know they are in the right place.\n\n## What kind of graphic am I trying to create?\n\nI'm trying to re-create the favicon used for a previous iteration of my personal website:\n\n- Square shape\n- Solid blue background color\n- My initials \"GT\" positioned on top, towards the bottom of the square.\n\nI'm starting simple. Should be doable, right?\n\n## Setup\n\nInstalling and loading `ggplot2`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('ggplot2')\nlibrary(\"ggplot2\")\n```\n:::\n\n\nHere, I set the default size of my plots for the rest of the document. It is an important setting since I will generate a square icon and, [by default, dimensions are 7 x 5 inches](https://quarto.org/docs/computations/execution-options.html#figure-options).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  fig.width = 5,\n  fig.height = 5\n)\n```\n:::\n\n\n## Creating the graphic\n\nI decided to tackle the blue background first. I remembered that ggplot has different [geoms](https://ggplot2.tidyverse.org/reference/geom_tile.html) to create a square. I looked up the documentation and started coding.\n\nI iterated through `geom_raster()`, `geom_rect()` and landed on `geom_tile()`. It is best suited for my use case. I just need to define the size of the square and use the origin (0,0) as the center of the square.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsquare_size <- 5\nmy_blue <- \"#0063dc\"\n\n(p <- ggplot() +\n  geom_tile(\n    aes(x = 0, y = 0, width = square_size, height = square_size),\n    fill = my_blue\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=480}\n:::\n:::\n\n\nNow, I will 1) add the text, position it, and then 2) remove all plot elements like grid lines, axes, etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(p <- p +\n  geom_text(\n    aes(\n      x = 0,\n      y = -square_size / 5,\n      label = \"GT\",\n      family = \"Inter\",\n      fontface = \"bold\"\n    ),\n    color = \"white\",\n    size = square_size / 2,\n    size.unit = 'in'\n  ) +\n  theme(rect = element_rect(fill = \"transparent\")) +\n  theme_void()\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=480}\n:::\n:::\n\n\nVoilà!\n\nOn purpose, I defined the position of the text and its size as a factor of the variable `square_size`. I hope that it will make it easier to export this graphic in different sizes after.\n\nRegarding the font, I'm using [Inter](https://rsms.me/inter/). I had to download and install it on Mac OS for it to become available in the plot.\n\n## Saving in various sizes and formats\n\nThis is when things get more complicated for two reasons:\n\n1. No clear spec for favicons exists. It depends on browsers, mobile OSes. Different formats, different sizes.\n1. Resizing a plot is not as straightforward as I thought\n\n### Favicon specs\n\nWhile browsing, I found various specs[^1] for this favicon. I will spare you the details. In the end, I landed on the following:\n\n[^1]: Most complete article that I could find: RealFaviconGenerator's [Understanding favicon elements](https://realfavicongenerator.net/favicon-guides/understanding-favicon-elements).\n\n1. `favicon.ico` 32x32 (px)\n1. `favicon.png` 96x96 (px)\n1. `apple-touch-icon.png` 180x180 (px)\n1. `favicon.svg`\n\n### Scaling issues\n\nSo far, I've set all my measurements in inches (figure size, font size). Now, my goal is to provide a size in pixels and to automatically resize and scale the icon accordingly.\n\n\nThe problem is...\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\n  p,\n  filename = \"icons/favicon_problem.png\",\n  dpi = 'retina', #retina = 320, according to documentation\n  width = 96,\n  height = 96,\n  units = 'px',\n  bg = \"transparent\"\n)\n```\n:::\n\n\n![](icons/favicon_problem.png)\n\n... that the dimensions are good, but the proportions are not. With `ggsave` I can easily define the size in pixels, but this doesn't change the font size in the plot.\n\nChristophe Nicault's article [Understanding text size and resolution in ggplot2](https://www.christophenicault.com/post/understand_size_dimension_ggplot2/) explains very well what happens. They recommend to use a package called `ragg` and the `scaling` option.\n\nI tried, but simply installing `ragg` created a big error[^quarto-ragg] in Quarto and completely destroyed my ability to preview my post. I also played around with the `scale` option in `ggsave()`, to no avail.\n\n[^quarto-ragg]: `quarto preview` would throw a `segfault` error that I was not able to resolve. \n\nAs a result, I decided to handle the scaling myself.\n\n### DIY scaling\n\nSince I've defined sizes in inches when creating the graphic and since I want to express icon dimensions in pixels, I need to understand the relationship between inches and pixels first.\n\nFrom [Understanding text size and resolution in ggplot2](https://www.christophenicault.com/post/understand_size_dimension_ggplot2/):\n\n> The relation is : (size in inches) = (screen size in pixel) / PPI or (screen size in pixel) = DPI * (size in inches)\n\nIn other words, if I want an icon with size 32 x 32 pixels, the conversion in inches will be `32 / 320 = 0.1` (with a resolution of 320). I can create a function that takes these two parameters as arguments, converts that to a measurement in inches and then passes that to `ggplot2`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function that creates the icon with sizes in inches\ncreate_icon <- function(square_size_inches) {\n  p <- ggplot() +\n    geom_tile(\n      aes(\n        x = 0,\n        y = 0,\n        width = square_size_inches,\n        height = square_size_inches\n      ),\n      fill = my_blue\n    ) +\n    geom_text(\n      aes(\n        x = 0,\n        y = -square_size_inches / 5,\n        label = \"GT\",\n        family = \"Inter\",\n        fontface = \"bold\"\n      ),\n      color = \"white\",\n      size = square_size_inches /2,\n      size.unit = 'in'\n    ) +\n    theme_void() \n    #+\n    #theme(\n    #  plot.background = element_rect(fill=my_blue, #colour = NA),\n    #  panel.background = element_rect(fill=my_blue, #colour = NA),\n    #)\n\n    return(p)\n  }\n\n# Function that uses a size in pixels and a dpi to convert it into inches, create the icon and save it to disk\ncreate_and_save_icon <- function(filename, size_pixels, dpi = 320) {\n  square_size_inches <- size_pixels / dpi\n  icon <- create_icon(square_size_inches)\n\n  ggsave(\n    plot = icon,\n    filename = filename,\n    dpi = dpi,\n    width = size_pixels,\n    height = size_pixels,\n    units = 'px',\n    bg = my_blue\n  )\n}\n```\n:::\n\n\nLet's try it out!\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_and_save_icon(filename = 'icons/favicon_32x32.png', size_pixels = 32, dpi = 320)\n```\n:::\n\n\n![](icons/favicon_32x32.png)\n\nIt works! I can now generate the different sizes that I need.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsizes = c(32, 96, 180)\n\nfor (size in sizes) {\n  filename = paste0('icons/favicon_', size, 'x', size, '.png')\n\n  create_and_save_icon(filename = filename, size_pixels = size, dpi = 320)\n}\n```\n:::\n\n::: {layout-ncol=3}\n![favicon_32x32.png](icons/favicon_32x32.png){fig-align='left'}\n\n![favicon_96x96.png](icons/favicon_96x96.png){fig-align='left'}\n\n![favicon_180x180.png](icons/favicon_180x180.png){fig-align='left'}\n:::\n\nAnd for the last one, the `.svg` version. Here, we'll use the base R built-in SVG graphics device:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicon <- create_icon(1)\nsvg(\"icons/favicon.svg\", width = 1, height = 1)\nprint(icon)\ninvisible(dev.off())\n```\n:::\n\n\n![favicon.svg](icons/favicon.svg){fig-align='left'}",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}